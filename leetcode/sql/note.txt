mysql

登录
	mysql -uroot -p

查看有哪些数据库
	show databases;

创建数据库
	create database jiangxy;

选择数据库
	use jiangxy;

基本单元是表
	行：被称为数据/记录
	列：字段
		字段名，数据类型，约束等属性

查看表
	show tables;

SQL语言类型
	DQL 数据查询语言
		select
	QML 数据操作语言 操作数据
		insert delete update
	DDL	数据定义语言 动的表结构
		create drop alter
	TCL 事务控制语言
		commit 事务提交
		rollback 事务回滚
	DCL 数据控制语言
		grant 授权
		revoke 撤销权限

导入table
	source 路径


查询字段
	select * from table
查表结构
	desc table
查看当前是哪个数据库
	select database();


DQL
	select 字段名，字段名 from table
	select * from table
		效率低 可读性差
	别名
	select 字段名 as 别名 from table

	字段可以参与数学运算
	select sal*12 as year_sal from table

所有数据库中，字符串用单引号，这是标准！！

条件查询
	select
	from
	where
条件
=
<> !=
<
<=
>
>=
between and     左小右大
is null/is not null    null不能用等于衡量

and 并且
or 或者
	优先级and>or
in/not in 多个or
	job in('manager','salesman')
like 模糊查询
	% 任意多个字符
	_ 任意一个字符
	\_ \%转义字符


排序
	默认升序 order by (sal asc)
	降序 order by sal desc

	两个排序
		order by sal asc, ename asc

select
from
where
order by
	from where select order by


单行处理函数
lower
upper
substr(ename,1,2)
	下标从1开始，长度2
	注：下标1就是第1个字符，和语言不同
length 长度
concat 拼接字符串
trim 去前后空格
round 四舍五入
	round(123.45678, 1)
		保留一个小数，可以位负数
rand 随机数
ifnull
	null只要参与运算一定null
	ifnull(数据，哪个值)

case 
	when then
	else
end

分组函数
count
sum
max
min
avg
得先分组 如果不分组默认为一组

分组函数，忽略NULL，不用提前处理
分组函数不能用在having子句中

分组查询
	select
	from
	group by

有group by，select语言只能跟参与分组的字段，和分组函数

select
from
where
group by
order by

实际
from 
	where 
		group by 
			having
				select 
					order by


select deptno,job,max(sal) from emp group by deptno,job;

distinct
	去重
	必须在最前面
	可以联和去重


连接查询
	内连接
		等值连接
		非等值连接
		自连接
	外连接
		左外连接
		右外连接
	全连接

(非)等值连接
	select
		from
			join
				on
					where

 select e.ename,e.sal,s.grade from emp as e inner join salgrade as s on e.sal between s.losal and s.hisal;

自连接
select a.ename as staff, b.ename as boss from emp a join emp b on a.mgr = b.empno;

内连接没有占主导的

外连接
	跟上面一样
	left right 谁是主表
	主表的每一行都要有 即使没匹配






select e.ename,d.dname,e.sal,s.grade
from emp e
join dept d
on e.deptno = d.deptno
join salgrade s
on e.sal between s.losal and s.hisal;


子查询
select嵌套
	select
		(select)
	from
		(select)
	where
		(select)

where子查询
	select ename,sal from emp where sal > (select min(sal) from emp);
from子查询
	select a.job,a.avg_sal,s.grade from (select job,avg(sal) avg_sal from emp group by job) a join salgrade s on a.avg_sal between s.losal and s.hisal;
select子查询
	select后的子查询一次只能返回一条结果
	尚硅谷宋红康p46

union
	效率高，避免连接
	字段要一样

limit 重要
	只用一部分数据，用于分页
	select ename,sal from emp order by sal desc limit 0, 5;
	在order by之后执行



DDL
	CREATE DROP ALTER
	CREATE TABLE 表名 (
	字段名1, 数据类型 default 0,
	字段名2, 数据类型,
	字段名2, 数据类型
	);

	varchar 255
	char 比varchar快 255
	int 11
	bigint
	float
	double
	date 短日期
	datetime 长日期
	clob 字符大对象 4G
	blob 二进制大对象 图片视频 插入数据用IO流

	建表之前先
	drop table if exists t_student;

insert
	insert into 表名(字段1，字段2，...) values(值1，值2)，
	(值1，值2)，
	(值1，值2)，
	(值1，值2)
	字段名可省略

format 数字格式化
	 format(sal, '$999.999')

str_to_date varchar到date
data_format date到varchar

str_to_date('1998-03-17','%Y-%m-%d')
	%Y
	%m
	%d
	%h
	%i
	%s
	如何是如上的格式可以不写str_to_date,直接'1998-03-17'

date_format(birth,'%Y/%m/%d')
默认%Y-%m-%d


date 年月日
datetime 年月日时分秒 
	%Y-%m-%d %h:%i:%s
	now() datetime类型

update 表名 set 字段名1=值1 字段名2=值2 where 条件
delete from 表名 where 条件

复制表
create table 表名 as select * from emp;



delete from 表名(DML)
支持回滚rollback 逻辑删除、
truncate 快 不支持回滚
truncate table 表名(DDL) 删数据
drop table 表名 删表 结构都没了

alter修改表结构

非空约束       not null
唯一性约束     unique 列级约束
主键约束 PK    primary key
外键约束 FK    
检查约束

联合约束
	name varchar(255) not null unique
	就是主键了PK mysql是这样的
	Oracle不是这样的

联合唯一
	unique(name, email) 表级约束
复合主键
	primary key(name, email) 表级约束
	不建议使用

自然主键：
业务主键：
自然主键用的多，因为不影响业务

自增约束:
	id int primary key auto_increment 

外键约束：
	classno int primary key
	foreign key(cno) references t_class(classno)

外键在父表中至少是unique约束，可以为NULL

存储引擎
InnoDB
支持的引擎
	show engines \G

常用的引擎
	MyISAM
	InnoDB
		支持事务 安全
	MEMORY
		放在内存中，断电消失 就是快

事务
	ACID
		A 事务是最小的控制单元 不可再分
		C 多条DML同时成功或者同时失败 保证数据的一致性
		I A事务和B事务有一定隔离
		D 事务结束的一个保障
	

事务相关语句 DML	
	insert
	delete
	update


事务控制
	start transaction;
	commit;
	rollback;

事务的隔离性
	读未提交 read uncommitted
		事务A可以读到事务B未提交的数据
		脏读
	读已提交 read committed
		事务A只能读到事务B提交后的数据
		没有脏读
		有不可重复读 就是前后不一致
		比较真实的数据，每次读到的很真实
	可重复读 repeatable read
		事务A开启后，每一次在事务A中读到的数据都是一样的
		即使被其他事务改了 也不改
		幻读 
	序列化/串行化 serializable
		解决了所有问题
		串行 不能并发 慢


查看系统隔离级别：select @@global.tx_isolation;
查看会话隔离级别(5.0以上版本)：select @@tx_isolation;
查看会话隔离级别(8.0以上版本)：select @@transaction_isolation;

如何修改mysql中的事务隔离级别：
set session transaction isolation level repeatable read; 设置会话隔离级别为可重复读
set session transaction isolation level read uncommitted; 设置会话隔离级别为读未提交
set session transaction isolation level read committed; 设置会话隔离级别为读已提交

索引
	mysql 有unique就有索引
	任何一张表的任何一条记录都有一个硬盘存储编号
	mysql 索引是一个单独的对象，不同的索引以不同的形式存在
		MyISAM .MYI
		InnoDB tablespace
		MEMORY 内存

	经常出现在where后面
	DML操作少

创建索引
	create index emp_no on emp(empno);
删除索引
	drop index emp_no on emp;

查看是否使用索引
	explain select * from emp where ename = 'jack';

索引失效
	select * from emp where ename like '%T';
	or 不是都有索引
	复合索引 不是最左侧
	select * from emp where sal + 1 = 800;
	索引列使用了函数 lower(ENAME) = 'jack'

索引是进行优化的重要手段


视图
	create view emp_view as select * from emp;
	drop view emp_view

	对视图增删改查，原表也会修改
	封装的思想

导出数据库
	mysqldump jiangxy > 路径 -uroot -p123456
	指定表
	mysqldump jiangxy emp > 路径 -uroot -p123456
导入数据库
	先登录
	source 路径
